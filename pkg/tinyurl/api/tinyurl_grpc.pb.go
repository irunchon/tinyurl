// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/tinyurl.proto

package tinyurl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShortenURL_GetShortURLbyLong_FullMethodName = "/tinyurl.ShortenURL/GetShortURLbyLong"
	ShortenURL_GetLongURLbyShort_FullMethodName = "/tinyurl.ShortenURL/GetLongURLbyShort"
)

// ShortenURLClient is the client API for ShortenURL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenURLClient interface {
	GetShortURLbyLong(ctx context.Context, in *LongURL, opts ...grpc.CallOption) (*ShortURL, error)
	GetLongURLbyShort(ctx context.Context, in *ShortURL, opts ...grpc.CallOption) (*LongURL, error)
}

type shortenURLClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenURLClient(cc grpc.ClientConnInterface) ShortenURLClient {
	return &shortenURLClient{cc}
}

func (c *shortenURLClient) GetShortURLbyLong(ctx context.Context, in *LongURL, opts ...grpc.CallOption) (*ShortURL, error) {
	out := new(ShortURL)
	err := c.cc.Invoke(ctx, ShortenURL_GetShortURLbyLong_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenURLClient) GetLongURLbyShort(ctx context.Context, in *ShortURL, opts ...grpc.CallOption) (*LongURL, error) {
	out := new(LongURL)
	err := c.cc.Invoke(ctx, ShortenURL_GetLongURLbyShort_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenURLServer is the server API for ShortenURL service.
// All implementations must embed UnimplementedShortenURLServer
// for forward compatibility
type ShortenURLServer interface {
	GetShortURLbyLong(context.Context, *LongURL) (*ShortURL, error)
	GetLongURLbyShort(context.Context, *ShortURL) (*LongURL, error)
	mustEmbedUnimplementedShortenURLServer()
}

// UnimplementedShortenURLServer must be embedded to have forward compatible implementations.
type UnimplementedShortenURLServer struct {
}

func (UnimplementedShortenURLServer) GetShortURLbyLong(context.Context, *LongURL) (*ShortURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortURLbyLong not implemented")
}
func (UnimplementedShortenURLServer) GetLongURLbyShort(context.Context, *ShortURL) (*LongURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLongURLbyShort not implemented")
}
func (UnimplementedShortenURLServer) mustEmbedUnimplementedShortenURLServer() {}

// UnsafeShortenURLServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenURLServer will
// result in compilation errors.
type UnsafeShortenURLServer interface {
	mustEmbedUnimplementedShortenURLServer()
}

func RegisterShortenURLServer(s grpc.ServiceRegistrar, srv ShortenURLServer) {
	s.RegisterService(&ShortenURL_ServiceDesc, srv)
}

func _ShortenURL_GetShortURLbyLong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LongURL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenURLServer).GetShortURLbyLong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenURL_GetShortURLbyLong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenURLServer).GetShortURLbyLong(ctx, req.(*LongURL))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenURL_GetLongURLbyShort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortURL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenURLServer).GetLongURLbyShort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenURL_GetLongURLbyShort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenURLServer).GetLongURLbyShort(ctx, req.(*ShortURL))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortenURL_ServiceDesc is the grpc.ServiceDesc for ShortenURL service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortenURL_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tinyurl.ShortenURL",
	HandlerType: (*ShortenURLServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShortURLbyLong",
			Handler:    _ShortenURL_GetShortURLbyLong_Handler,
		},
		{
			MethodName: "GetLongURLbyShort",
			Handler:    _ShortenURL_GetLongURLbyShort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/tinyurl.proto",
}
